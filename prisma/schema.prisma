// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique
  name     String
  title    String
  role     ROLE    @default(USER)
  email    String
  avatar   String?
  isActive Boolean @default(true)

  projectIds String[]  @db.ObjectId
  projects   Project[] @relation(fields: [projectIds], references: [id])

  taskId String? @db.ObjectId
  task   Task[]

  activites Activity[]

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdById String
  createdBy   String

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  stage    String
  date     DateTime
  priority String

  description String

  projectId String?  @db.ObjectId
  project   Project? @relation(fields: [projectId], references: [id])

  assigneeId String? @db.ObjectId
  assignee   User?   @relation(fields: [assigneeId], references: [id])

  assets     Asset[]
  activities Activity[]
  comments   Comment[]

  createdById   String
  createdByName String

  isRecycled Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Asset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  type    String
  comment String

  ownerId String? @db.ObjectId
  owner   User?   @relation(fields: [ownerId], references: [id])

  task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  authorId  String?  @db.ObjectId
  author    User?    @relation(fields: [authorId], references: [id])
  taskId    String?  @db.ObjectId
  task      Task?    @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
